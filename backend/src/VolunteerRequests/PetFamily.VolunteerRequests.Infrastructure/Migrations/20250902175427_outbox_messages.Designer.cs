// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using PetFamily.VolunteerRequests.Infrastructure.DbContexts;

#nullable disable

namespace PetFamily.VolunteerRequests.Infrastructure.Migrations
{
    [DbContext(typeof(VolunteerRequestsWriteDbContext))]
    [Migration("20250902175427_outbox_messages")]
    partial class outbox_messages
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("volunteer_requests")
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("PetFamily.VolunteerRequests.Domain.Entities.RejectedRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.ComplexProperty<Dictionary<string, object>>("RejectionDate", "PetFamily.VolunteerRequests.Domain.Entities.RejectedRequest.RejectionDate#RejectionDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("rejection_date");
                        });

                    b.HasKey("Id")
                        .HasName("pk_rejected_requests");

                    b.ToTable("rejected_requests", "volunteer_requests");
                });

            modelBuilder.Entity("PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid")
                        .HasColumnName("request_id");

                    b.ComplexProperty<Dictionary<string, object>>("CreationDate", "PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest.CreationDate#CreationDate", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<DateTime>("Value")
                                .HasColumnType("timestamp with time zone")
                                .HasColumnName("creation_date");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("RequestStatus", "PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest.RequestStatus#RequestStatus", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("text")
                                .HasColumnName("request_status");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("UserId", "PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest.UserId#UserId", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<Guid>("Value")
                                .HasColumnType("uuid")
                                .HasColumnName("user_id");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("VolunteerInformation", "PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest.VolunteerInformation#VolunteerInformation", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasMaxLength(1500)
                                .HasColumnType("character varying(1500)")
                                .HasColumnName("volunteer_information");
                        });

                    b.HasKey("Id")
                        .HasName("pk_volunteer_requests");

                    b.ToTable("volunteer_requests", "volunteer_requests");
                });

            modelBuilder.Entity("PetFamily.VolunteerRequests.Infrastructure.Outbox.OutboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Error")
                        .HasColumnType("text");

                    b.Property<DateTime>("OccuredOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("occured_on_utc");

                    b.Property<string>("Payload")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("jsonb")
                        .HasColumnName("payload");

                    b.Property<DateTime?>("ProcessedOnUtc")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("processed_on_utc");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)")
                        .HasColumnName("type");

                    b.HasKey("Id");

                    b.HasIndex("OccuredOnUtc", "ProcessedOnUtc")
                        .HasDatabaseName("idx_outbox_messages_unprocessed")
                        .HasFilter("processed_on_utc is NULL");

                    NpgsqlIndexBuilderExtensions.IncludeProperties(b.HasIndex("OccuredOnUtc", "ProcessedOnUtc"), new[] { "Id", "Type", "Payload" });

                    b.ToTable("OutboxMessages", "volunteer_requests");
                });

            modelBuilder.Entity("PetFamily.VolunteerRequests.Domain.Entities.RejectedRequest", b =>
                {
                    b.HasOne("PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest", "VolunteerRequest")
                        .WithOne("RejectedRequest")
                        .HasForeignKey("PetFamily.VolunteerRequests.Domain.Entities.RejectedRequest", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VolunteerRequest");
                });

            modelBuilder.Entity("PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest", b =>
                {
                    b.OwnsOne("PetFamily.VolunteerRequests.Domain.ValueObjects.AdminId", "AdminId", b1 =>
                        {
                            b1.Property<Guid>("VolunteerRequestId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                                .HasColumnName("admin_id");

                            b1.HasKey("VolunteerRequestId");

                            b1.ToTable("volunteer_requests", "volunteer_requests");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerRequestId");
                        });

                    b.OwnsOne("PetFamily.VolunteerRequests.Domain.ValueObjects.DiscussionId", "DiscussionId", b1 =>
                        {
                            b1.Property<Guid>("VolunteerRequestId")
                                .HasColumnType("uuid");

                            b1.Property<Guid>("Value")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("uuid")
                                .HasDefaultValue(new Guid("00000000-0000-0000-0000-000000000000"))
                                .HasColumnName("discussion_id");

                            b1.HasKey("VolunteerRequestId");

                            b1.ToTable("volunteer_requests", "volunteer_requests");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerRequestId");
                        });

                    b.OwnsOne("PetFamily.VolunteerRequests.Domain.ValueObjects.RejectionComment", "RejectionComment", b1 =>
                        {
                            b1.Property<Guid>("VolunteerRequestId")
                                .HasColumnType("uuid");

                            b1.Property<string>("Value")
                                .HasMaxLength(1500)
                                .HasColumnType("character varying(1500)")
                                .HasColumnName("rejection_comment");

                            b1.HasKey("VolunteerRequestId");

                            b1.ToTable("volunteer_requests", "volunteer_requests");

                            b1.WithOwner()
                                .HasForeignKey("VolunteerRequestId");
                        });

                    b.Navigation("AdminId");

                    b.Navigation("DiscussionId");

                    b.Navigation("RejectionComment");
                });

            modelBuilder.Entity("PetFamily.VolunteerRequests.Domain.Entities.VolunteerRequest", b =>
                {
                    b.Navigation("RejectedRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
